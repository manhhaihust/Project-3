{"ast":null,"code":"var _jsxFileName = \"/Users/manhhaihust/Desktop/project44/Project-3/src/components/admin/Sale.js\";\nimport React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport '../../css/admin/Sale.css';\nimport { connect } from 'react-redux';\nimport { actGetAllOrderRequestAdmin } from '../../actions/index';\n\nclass Sale extends Component {\n  componentDidMount() {\n    this.props.onGetAllOrders();\n  }\n\n  render() {\n    let {\n      orders\n    } = this.props;\n    let revenue = orders.reduce((result, current) => {\n      // total_revenue\n      result += current.totalPrice;\n      return result;\n    }, 0);\n    let temp = [];\n    let result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    for (const order of orders) {\n      const parts = order.date.split('-'); // console.log(parts)\n\n      const orderDay = new Date(parts[0] + ' ' + parts[1] + ' ' + parts[2]); // console.log(orderDay)\n\n      temp.push({\n        month: orderDay.getMonth(),\n        totalPrice: order.totalPrice\n      });\n    } // console.log(temp)\n\n\n    let months = temp.reduce((accumulator, currentValue) => {\n      if (currentValue.month in accumulator) {\n        accumulator[currentValue.month]++;\n      } else {\n        accumulator[currentValue.month] = 1;\n      }\n\n      return accumulator;\n    }, {}); // console.log(months)\n\n    for (let i = 0; i <= 11; i++) {\n      for (const month in months) {\n        if (i === parseInt(month)) {\n          result[i] = months[month];\n          break;\n        }\n\n        result[i] = 0;\n      }\n    } // console.log(result)\n\n\n    const series = [{\n      name: 'Sale',\n      data: result\n    }];\n    const options = {\n      colors: ['rgba(3, 211, 181, 0.85)'],\n      grid: {\n        show: false\n      },\n      chart: {\n        toolbar: {\n          show: false\n        },\n        type: 'bar',\n        height: 350,\n        foreColor: 'rgb(22, 31, 106)'\n      },\n      plotOptions: {\n        bar: {\n          dataLabels: {\n            style: {\n              fontSize: '16px'\n            }\n          },\n          horizontal: false,\n          columnWidth: '60%'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        labels: {\n          style: {\n            fontSize: '16px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            fontSize: '16px'\n          },\n          formatter: val => {\n            return Math.trunc(val);\n          }\n        }\n      },\n      fill: {\n        opacity: 1,\n        colors: ['rgba(3, 211, 181, 0.85)']\n      },\n      tooltip: {\n        fillSeriesColor: false,\n        y: {\n          title: {\n            formatter: seriesName => seriesName\n          },\n          formatter: undefined\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Sale admin-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"bt-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, \"Sale History\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, \"$\", revenue)), /*#__PURE__*/React.createElement(Chart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      height: 350,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetAllOrders: () => {\n      dispatch(actGetAllOrderRequestAdmin());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);","map":{"version":3,"sources":["/Users/manhhaihust/Desktop/project44/Project-3/src/components/admin/Sale.js"],"names":["React","Component","Chart","connect","actGetAllOrderRequestAdmin","Sale","componentDidMount","props","onGetAllOrders","render","orders","revenue","reduce","result","current","totalPrice","temp","order","parts","date","split","orderDay","Date","push","month","getMonth","months","accumulator","currentValue","i","parseInt","series","name","data","options","colors","grid","show","chart","toolbar","type","height","foreColor","plotOptions","bar","dataLabels","style","fontSize","horizontal","columnWidth","enabled","stroke","width","xaxis","categories","labels","yaxis","formatter","val","Math","trunc","fill","opacity","tooltip","fillSeriesColor","y","title","seriesName","undefined","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from 'react-apexcharts';\nimport '../../css/admin/Sale.css'\nimport { connect } from 'react-redux'\nimport { actGetAllOrderRequestAdmin } from '../../actions/index'\n\nclass Sale extends Component {\n\n    componentDidMount() {\n        this.props.onGetAllOrders()\n    }\n\n    render() {\n        let { orders } = this.props\n\n        let revenue = orders.reduce((result, current) => { // total_revenue\n            result += current.totalPrice\n            return result\n        }, 0)\n\n        let temp = []\n        let result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        for (const order of orders) {\n            const parts = order.date.split('-');\n            // console.log(parts)\n            const orderDay = new Date(parts[0] + ' ' + parts[1] + ' ' + parts[2]);\n            // console.log(orderDay)\n            temp.push({ month: orderDay.getMonth(), totalPrice: order.totalPrice });\n        }\n        // console.log(temp)\n        let months = temp.reduce((accumulator, currentValue) => {\n            if (currentValue.month in accumulator) {\n                accumulator[currentValue.month]++\n            }\n            else {\n                accumulator[currentValue.month] = 1\n            }\n            return accumulator\n        }, {})\n\n        // console.log(months)\n\n        for (let i = 0; i <= 11; i++) {\n            for (const month in months) {\n                if (i === parseInt(month)) {\n                    result[i] = months[month];\n                    break\n                }\n                result[i] = 0\n            }\n        }\n\n        // console.log(result)\n        const series = [{\n            name: 'Sale',\n            data: result\n        }];\n        const options = {\n            colors: ['rgba(3, 211, 181, 0.85)'],\n            grid: {\n                show: false\n            },\n            chart: {\n                toolbar: {\n                    show: false\n                },\n                type: 'bar',\n                height: 350,\n                foreColor: 'rgb(22, 31, 106)'\n            },\n            plotOptions: {\n                bar: {\n                    dataLabels: {\n                        style: {\n                            fontSize: '16px',\n                        }\n                    },\n                    horizontal: false,\n                    columnWidth: '60%'\n                },\n            },\n            dataLabels: {\n                enabled: false,\n            },\n            stroke: {\n                show: true,\n                width: 2,\n                colors: ['transparent']\n            },\n            xaxis: {\n                categories: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                labels: {\n                    style: {\n                        fontSize: '16px'\n                    }\n                }\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        fontSize: '16px'\n                    },\n                    formatter: (val) => {\n                        return Math.trunc(val)\n                    }\n                }\n            },\n            fill: {\n                opacity: 1,\n                colors: ['rgba(3, 211, 181, 0.85)']\n            },\n            tooltip: {\n                fillSeriesColor: false,\n                y: {\n                    title: {\n                        formatter: (seriesName) => seriesName,\n                    },\n                    formatter: undefined\n                }\n            }\n        };\n        return (\n            <div className=\"Sale admin-col\">\n                <div className=\"header\">\n                    <h3 className=\"bt-header\">Sale History</h3>\n                    <div className=\"total\">${revenue}</div>\n                </div>\n                <Chart options={options} series={series} type=\"bar\" height={350} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        orders: state.order,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetAllOrders: () => {\n            dispatch(actGetAllOrderRequestAdmin())\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale)"]},"metadata":{},"sourceType":"module"}