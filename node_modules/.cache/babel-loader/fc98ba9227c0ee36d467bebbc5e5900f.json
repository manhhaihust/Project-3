{"ast":null,"code":"var _jsxFileName = \"/Users/manhhaihust/Desktop/project44/Project-3/src/pages/admin/Products.js\";\nimport React, { Component } from 'react';\nimport Header from '../../components/admin/Header';\nimport Nav from '../../components/admin/NavAdmin';\nimport Main from '../../components/admin/Main';\nimport Product from '../../components/client/Product';\nimport ProductFunc from '../../components/admin/ProductFunc';\nimport { connect } from 'react-redux';\nimport { actGetAllProductRequest, actFilterProductsAdminRequest, actFindProductRequest, actFilterProductByNameAdminRequest, actToggleFormProduct, actGetProductUpdate, actResetProductUpdate, actDeleteProductRequest, actAddProductRequest, actUpdateProductRequest, actGetAllCategoryRequest } from '../../actions/index';\nimport { Redirect } from 'react-router-dom';\n\nclass Products extends Component {\n  constructor(pros) {\n    super(pros);\n\n    this.showProducts = products => {\n      let result = null;\n\n      if (products.length > 0) {\n        result = products.map((product, index) => {\n          return /*#__PURE__*/React.createElement(Product, {\n            key: index,\n            product: product,\n            type: \"admin\",\n            onOpenFormProduct: this.props.onOpenFormProduct,\n            onGetProductUpdate: this.props.onGetProductUpdate,\n            deleteProduct: this.props.deleteProduct,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 24\n            }\n          });\n        });\n      }\n\n      return result;\n    };\n\n    this.paginate = number => {\n      this.setState({\n        currentPage: number\n      });\n    };\n\n    this.state = {\n      currentPage: 1,\n      perPage: 8\n    };\n  }\n\n  componentDidMount() {\n    this.props.onGetAllCategory();\n    this.props.onGetAllProduct();\n  }\n\n  render() {\n    let adminToken = localStorage.getItem('adminToken');\n\n    if (!adminToken) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/admin/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let {\n      currentPage,\n      perPage\n    } = this.state;\n    let {\n      products,\n      onFilterProducts,\n      onFindProduct,\n      onFilterProductsByName,\n      onOpenFormProduct,\n      isOpenFormProduct,\n      onCloseFormProduct,\n      productEditing,\n      onResetProductUpdate,\n      onAddProduct,\n      onUpdateProduct,\n      isClick,\n      category\n    } = this.props;\n    const indexOfLastProduct = currentPage * perPage;\n    const indexOfFirstProduct = indexOfLastProduct - perPage;\n    const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      onOpenFormProduct: onOpenFormProduct,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Nav, {\n      match: this.props.match,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }), isOpenFormProduct ? /*#__PURE__*/React.createElement(ProductFunc, {\n      isOpenFormProduct: isOpenFormProduct,\n      onCloseFormProduct: onCloseFormProduct,\n      productEditing: productEditing,\n      onResetProductUpdate: onResetProductUpdate,\n      onAddProduct: onAddProduct,\n      onUpdateProduct: onUpdateProduct,\n      category: category // onSetIsClickTrue={onSetIsClickTrue}\n      // isClick={isClick}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }) : '', /*#__PURE__*/React.createElement(Main, {\n      showProducts: this.showProducts,\n      products: currentProducts,\n      perPage: perPage,\n      totalProducts: products.length,\n      paginate: this.paginate,\n      onFilterProducts: onFilterProducts,\n      onFindProduct: onFindProduct,\n      onFilterProductsByName: onFilterProductsByName,\n      category: category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    isOpenFormProduct: state.isOpenFormProduct,\n    productEditing: state.productEditing,\n    category: state.category // isClick: state.isClick\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetAllProduct: () => {\n      dispatch(actGetAllProductRequest());\n    },\n    onFilterProducts: (keyword, category, priceType) => {\n      dispatch(actFilterProductsAdminRequest(keyword, category, priceType));\n    },\n    onFindProduct: name => {\n      dispatch(actFindProductRequest(name));\n    },\n    onFilterProductsByName: keyword => {\n      dispatch(actFilterProductByNameAdminRequest(keyword));\n    },\n    onOpenFormProduct: () => {\n      dispatch(actToggleFormProduct());\n    },\n    onCloseFormProduct: () => {\n      dispatch(actToggleFormProduct());\n    },\n    onGetProductUpdate: product => {\n      dispatch(actGetProductUpdate(product));\n    },\n    onResetProductUpdate: () => {\n      dispatch(actResetProductUpdate());\n    },\n    deleteProduct: product => {\n      dispatch(actDeleteProductRequest(product));\n    },\n    onAddProduct: product => {\n      dispatch(actAddProductRequest(product));\n    },\n    onUpdateProduct: product => {\n      dispatch(actUpdateProductRequest(product));\n    },\n    onGetAllCategory: () => {\n      dispatch(actGetAllCategoryRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);","map":{"version":3,"sources":["/Users/manhhaihust/Desktop/project44/Project-3/src/pages/admin/Products.js"],"names":["React","Component","Header","Nav","Main","Product","ProductFunc","connect","actGetAllProductRequest","actFilterProductsAdminRequest","actFindProductRequest","actFilterProductByNameAdminRequest","actToggleFormProduct","actGetProductUpdate","actResetProductUpdate","actDeleteProductRequest","actAddProductRequest","actUpdateProductRequest","actGetAllCategoryRequest","Redirect","Products","constructor","pros","showProducts","products","result","length","map","product","index","props","onOpenFormProduct","onGetProductUpdate","deleteProduct","paginate","number","setState","currentPage","state","perPage","componentDidMount","onGetAllCategory","onGetAllProduct","render","adminToken","localStorage","getItem","onFilterProducts","onFindProduct","onFilterProductsByName","isOpenFormProduct","onCloseFormProduct","productEditing","onResetProductUpdate","onAddProduct","onUpdateProduct","isClick","category","indexOfLastProduct","indexOfFirstProduct","currentProducts","slice","match","mapStateToProps","mapDispatchToProps","dispatch","keyword","priceType","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Header from '../../components/admin/Header'\nimport Nav from '../../components/admin/NavAdmin'\nimport Main from '../../components/admin/Main'\nimport Product from '../../components/client/Product'\nimport ProductFunc from '../../components/admin/ProductFunc'\nimport { connect } from 'react-redux'\nimport {\n    actGetAllProductRequest,\n    actFilterProductsAdminRequest,\n    actFindProductRequest,\n    actFilterProductByNameAdminRequest,\n    actToggleFormProduct,\n    actGetProductUpdate,\n    actResetProductUpdate,\n    actDeleteProductRequest,\n    actAddProductRequest,\n    actUpdateProductRequest,\n    actGetAllCategoryRequest,\n} from '../../actions/index'\nimport { Redirect } from 'react-router-dom'\n\nclass Products extends Component {\n    constructor(pros) {\n        super(pros)\n        this.state = {\n            currentPage: 1,\n            perPage: 8\n        }\n    }\n\n    componentDidMount() {\n        this.props.onGetAllCategory()\n        this.props.onGetAllProduct()\n    }\n\n    showProducts = (products) => {\n        let result = null\n        if (products.length > 0) {\n            result = products.map((product, index) => {\n                return <Product\n                    key={index}\n                    product={product}\n                    type=\"admin\"\n                    onOpenFormProduct={this.props.onOpenFormProduct}\n                    onGetProductUpdate={this.props.onGetProductUpdate}\n                    deleteProduct = {this.props.deleteProduct}\n                />\n            })\n        }\n        return result\n    }\n\n    // deleteProduct = (product) => {\n    //     // callApi(`api/product/${_id}`,'DELETE',NULL)\n    //     console.log(product._id)\n    //     if (confirm(`bạn chắc chắn muốn xoá ${product.name}?`)) { //eslint-disable-line\n    //         // this.props.onDeleteProduct(id);\n    //         callApi(`api/product/${product._id}`,'DELETE',null)\n    //     }\n    // }\n\n    paginate = (number) => {\n        this.setState({\n            currentPage: number\n        })\n    }\n\n    render() {\n        let adminToken = localStorage.getItem('adminToken')\n        if (!adminToken) {\n            return <Redirect to=\"/admin/login\" />\n        }\n        let { currentPage, perPage } = this.state\n        let {\n            products,\n            onFilterProducts,\n            onFindProduct,\n            onFilterProductsByName,\n            onOpenFormProduct,\n            isOpenFormProduct,\n            onCloseFormProduct,\n            productEditing,\n            onResetProductUpdate,\n            onAddProduct,\n            onUpdateProduct,\n            isClick,\n            category\n        } = this.props\n        const indexOfLastProduct = currentPage * perPage\n        const indexOfFirstProduct = indexOfLastProduct - perPage\n        const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct)\n        return (\n            <React.Fragment>\n                <Header onOpenFormProduct={onOpenFormProduct} />\n                <Nav match={this.props.match} />\n                {isOpenFormProduct ?\n                    <ProductFunc\n                        isOpenFormProduct={isOpenFormProduct}\n                        onCloseFormProduct={onCloseFormProduct}\n                        productEditing={productEditing}\n                        onResetProductUpdate={onResetProductUpdate}\n                        onAddProduct={onAddProduct}\n                        onUpdateProduct={onUpdateProduct}\n                        category={category}\n                        // onSetIsClickTrue={onSetIsClickTrue}\n                        // isClick={isClick}\n                    /> : ''\n                }\n\n                <Main\n                    showProducts={this.showProducts}\n                    products={currentProducts}\n                    perPage={perPage}\n                    totalProducts={products.length}\n                    paginate={this.paginate}\n                    onFilterProducts={onFilterProducts}\n                    onFindProduct={onFindProduct}\n                    onFilterProductsByName={onFilterProductsByName}\n                    category={category}\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products,\n        isOpenFormProduct: state.isOpenFormProduct,\n        productEditing: state.productEditing,\n        category : state.category\n        // isClick: state.isClick\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetAllProduct: () => {\n            dispatch(actGetAllProductRequest())\n        },\n        onFilterProducts: (keyword, category, priceType) => {\n            dispatch(actFilterProductsAdminRequest(keyword, category, priceType))\n        },\n        onFindProduct: (name) => {\n            dispatch(actFindProductRequest(name))\n        },\n        onFilterProductsByName: (keyword) => {\n            dispatch(actFilterProductByNameAdminRequest(keyword))\n        },\n        onOpenFormProduct: () => {\n            dispatch(actToggleFormProduct())\n        },\n        onCloseFormProduct: () => {\n            dispatch(actToggleFormProduct())\n        },\n        onGetProductUpdate: (product) => {\n            dispatch(actGetProductUpdate(product))\n        },\n        onResetProductUpdate: () => {\n            dispatch(actResetProductUpdate())\n        },\n        deleteProduct: (product) => {\n            dispatch(actDeleteProductRequest(product))\n        },\n        onAddProduct: (product) => {\n            dispatch(actAddProductRequest(product))\n        },\n        onUpdateProduct: (product) => {\n            dispatch(actUpdateProductRequest(product))\n        },\n        onGetAllCategory: () => {\n            dispatch(actGetAllCategoryRequest())\n        }\n    } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products)"]},"metadata":{},"sourceType":"module"}