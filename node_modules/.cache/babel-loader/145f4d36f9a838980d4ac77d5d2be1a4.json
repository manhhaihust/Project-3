{"ast":null,"code":"import * as Types from '../constants/ActionTypes'; // let data = localStorage.getItem('products')\n// let initialstate = data ? JSON.parse(data) : []\n\nlet initialstate = [];\n\nlet findIndex = (products, id) => {\n  var result = -1;\n  products.forEach((product, index) => {\n    if (product._id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nconst products = (state = initialstate, actions) => {\n  switch (actions.type) {\n    case Types.GET_ALL_PRODUCT:\n      console.log('delete');\n      state = actions.products; // localStorage.setItem('products', JSON.stringify(state))\n\n      return [...state];\n\n    case Types.FILTER_CATEGORY:\n      state = actions.products;\n      console.log(state);\n      return [...state];\n\n    case Types.FIND_PRODUCT:\n      state = actions.product;\n      console.log(state);\n      return [...state];\n\n    case Types.GET_ONE_PRODUCT:\n      let {\n        id\n      } = actions;\n      let result = state.find(product => product._id === id);\n      console.log(result);\n      return result;\n\n    case Types.FILTER_PRODUCTS_ADMIN:\n      state = actions.products;\n      return [...state];\n\n    case Types.FILTER_PRODUCTS_BY_NAME:\n      state = actions.products;\n      return [...state];\n\n    case Types.DELETE_PRODUCT:\n      let index = findIndex(state, actions.product._id);\n      console.log(index);\n      state.splice(index, 1);\n      return [...state];\n\n    case Types.ADD_PRODUCT:\n      state.push(actions.product);\n      return [...state];\n\n    case Types.UPDATE_PRPODUCT:\n      let indexProductUpdate = findIndex(state, actions.product._id);\n      state[indexProductUpdate] = actions.product; // state.splice(indexProductUpdate,1)\n      // let newProduct = actions.product\n      // state.push(newProduct)\n      // console.log(state[indexProductUpdate])\n\n      return [...state];\n\n    default:\n      return [...state];\n  }\n};\n\nexport default products;","map":{"version":3,"sources":["/Users/manhhaihust/Desktop/project44/Project-3/src/reducers/products.js"],"names":["Types","initialstate","findIndex","products","id","result","forEach","product","index","_id","state","actions","type","GET_ALL_PRODUCT","console","log","FILTER_CATEGORY","FIND_PRODUCT","GET_ONE_PRODUCT","find","FILTER_PRODUCTS_ADMIN","FILTER_PRODUCTS_BY_NAME","DELETE_PRODUCT","splice","ADD_PRODUCT","push","UPDATE_PRPODUCT","indexProductUpdate"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB,C,CAEA;AAEA;;AACA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,IAAIC,SAAS,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAC9B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjC,QAAID,OAAO,CAACE,GAAR,KAAgBL,EAApB,EAAwB;AACpBC,MAAAA,MAAM,GAAGG,KAAT;AACH;AACJ,GAJD;AAKA,SAAOH,MAAP;AACH,CARD;;AAUA,MAAMF,QAAQ,GAAG,CAACO,KAAK,GAAGT,YAAT,EAAuBU,OAAvB,KAAmC;AAChD,UAAQA,OAAO,CAACC,IAAhB;AACI,SAAKZ,KAAK,CAACa,eAAX;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAL,MAAAA,KAAK,GAAGC,OAAO,CAACR,QAAhB,CAFJ,CAGI;;AACA,aAAO,CAAC,GAAGO,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACgB,eAAX;AACIN,MAAAA,KAAK,GAAGC,OAAO,CAACR,QAAhB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACiB,YAAX;AACIP,MAAAA,KAAK,GAAGC,OAAO,CAACJ,OAAhB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACkB,eAAX;AACI,UAAI;AAAEd,QAAAA;AAAF,UAASO,OAAb;AACA,UAAIN,MAAM,GAAGK,KAAK,CAACS,IAAN,CAAWZ,OAAO,IAAIA,OAAO,CAACE,GAAR,KAAgBL,EAAtC,CAAb;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACA,aAAOA,MAAP;;AACJ,SAAKL,KAAK,CAACoB,qBAAX;AACIV,MAAAA,KAAK,GAAGC,OAAO,CAACR,QAAhB;AACA,aAAO,CAAC,GAAGO,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACqB,uBAAX;AACIX,MAAAA,KAAK,GAAGC,OAAO,CAACR,QAAhB;AACA,aAAO,CAAC,GAAGO,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACsB,cAAX;AACI,UAAId,KAAK,GAAGN,SAAS,CAACQ,KAAD,EAAOC,OAAO,CAACJ,OAAR,CAAgBE,GAAvB,CAArB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAE,MAAAA,KAAK,CAACa,MAAN,CAAaf,KAAb,EAAmB,CAAnB;AACA,aAAO,CAAC,GAAGE,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAACwB,WAAX;AACId,MAAAA,KAAK,CAACe,IAAN,CAAWd,OAAO,CAACJ,OAAnB;AACA,aAAO,CAAC,GAAGG,KAAJ,CAAP;;AACJ,SAAKV,KAAK,CAAC0B,eAAX;AACI,UAAIC,kBAAkB,GAAGzB,SAAS,CAACQ,KAAD,EAAOC,OAAO,CAACJ,OAAR,CAAgBE,GAAvB,CAAlC;AACAC,MAAAA,KAAK,CAACiB,kBAAD,CAAL,GAA4BhB,OAAO,CAACJ,OAApC,CAFJ,CAGI;AACA;AACA;AACA;;AACA,aAAO,CAAC,GAAGG,KAAJ,CAAP;;AACJ;AACI,aAAO,CAAC,GAAGA,KAAJ,CAAP;AA1CR;AA4CH,CA7CD;;AA+CA,eAAeP,QAAf","sourcesContent":["import * as Types from '../constants/ActionTypes'\n\n// let data = localStorage.getItem('products')\n\n// let initialstate = data ? JSON.parse(data) : []\nlet initialstate = []\n\nlet findIndex = (products, id) => {\n    var result = -1;\n    products.forEach((product, index) => {\n        if (product._id === id) {\n            result = index;\n        }\n    });\n    return result\n}\n\nconst products = (state = initialstate, actions) => {\n    switch (actions.type) {\n        case Types.GET_ALL_PRODUCT:\n            console.log('delete')\n            state = actions.products\n            // localStorage.setItem('products', JSON.stringify(state))\n            return [...state]\n        case Types.FILTER_CATEGORY:\n            state = actions.products\n            console.log(state)\n            return [...state]\n        case Types.FIND_PRODUCT:\n            state = actions.product\n            console.log(state)\n            return [...state]\n        case Types.GET_ONE_PRODUCT:\n            let { id } = actions\n            let result = state.find(product => product._id === id)\n            console.log(result)\n            return result\n        case Types.FILTER_PRODUCTS_ADMIN:\n            state = actions.products\n            return [...state]\n        case Types.FILTER_PRODUCTS_BY_NAME:\n            state = actions.products\n            return [...state]\n        case Types.DELETE_PRODUCT:\n            let index = findIndex(state,actions.product._id)\n            console.log(index)\n            state.splice(index,1)\n            return [...state]\n        case Types.ADD_PRODUCT:\n            state.push(actions.product)\n            return [...state]\n        case Types.UPDATE_PRPODUCT:\n            let indexProductUpdate = findIndex(state,actions.product._id)\n            state[indexProductUpdate] = actions.product\n            // state.splice(indexProductUpdate,1)\n            // let newProduct = actions.product\n            // state.push(newProduct)\n            // console.log(state[indexProductUpdate])\n            return [...state]\n        default:\n            return [...state]\n    }\n}\n\nexport default products\n\n"]},"metadata":{},"sourceType":"module"}